#!/usr/bin/python
import sys
sys.path.insert(0, "..")

"""
Problem 12
------------------------------------------------------------------------------
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over 500 divisors?
------------------------------------------------------------------------------
"""
from utils.misc import get_divisors


def euler_012(TARGET_NUM_DIVISORS=500):
    curr_triangle_number, index = 1, 1
    num_divisors = 1

    while(num_divisors < TARGET_NUM_DIVISORS):
        index += 1
        curr_triangle_number += index

        num_divisors = len(get_divisors(curr_triangle_number))

    return curr_triangle_number


if __name__ == '__main__':
    print(euler_012())
